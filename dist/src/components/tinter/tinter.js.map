{"version":3,"file":"tinter.js","sourceRoot":"","sources":["../../../../src/components/tinter/tinter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAE,UAAU,EAAE,KAAK,EAAU,SAAS,EAAC,MAAM,eAAe,CAAC;;;;;IA0C5E,yBAAoB,EAAc;QAAd,OAAE,GAAF,EAAE,CAAY;0BApBb,QAAQ;uBAanB,CAAC;uBAED,CAAC;QAOT,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC3C,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;QACzC,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,CAAC;QACpC,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,OAAO,GAAG,GAAG,CAAC;KACtC;0BApBG,kCAAK;;;;kBAAC,KAAa;YAErB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YACxB,IAAI,CAAC,MAAM,EAAE,CAAC;;;;;IAmBhB,kCAAQ,GAAR;QAEE,IAAI,CAAC,MAAM,EAAE,CAAC;KACf;IAED,gCAAM,GAAN;QAEE,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC;QAC3D,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5D,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;QAC/C,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;QAE9C,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,YAAY,GAAG,iBAAe,CAAC,WAAM,CAAC,WAAM,IAAI,CAAC,UAAU,MAAG,CAAC;KAC9F;;gBA1DF,SAAS,SAAC;oBACT,QAAQ,EAAE,QAAQ;oBAClB,MAAM,EAAE,CAAC,4FAMR,CAAC;oBACF,QAAQ,EAAE,0FAIT;iBACF;;;;gBAnBkB,UAAU;;;0BA2B1B,KAAK,SAAC,OAAO;4BAOb,KAAK;4BAEL,KAAK;yBAGL,SAAS,SAAC,MAAM;;0BAvCnB;;SAoBa,eAAe","sourcesContent":["import {Component, ElementRef, Input, OnInit, ViewChild} from '@angular/core';\n\n/**\n * 着色\n */\n@Component({\n  selector: 'tinter',\n  styles: [`\n\n    .tinter-body {\n      display: inline-block;\n      position: relative;\n    }\n  `],\n  template: `\n    <div class=\"tinter-body\" #body>\n      <ng-content></ng-content>\n    </div>\n  `,\n})\nexport class TinterComponent implements OnInit\n{\n  colorValue: string = 'orange';\n\n  /**\n   * @param {string} value 着色颜色\n   */\n  @Input('color')\n  set color(value: string)\n  {\n    this.colorValue = value;\n    this.filter();\n  }\n\n  @Input()\n  offsetX = 8;\n  @Input()\n  offsetY = 8;\n\n  @ViewChild(\"body\")\n  body: ElementRef;\n\n  constructor(private el: ElementRef)\n  {\n    el.nativeElement.style.overflow = 'hidden';\n    el.nativeElement.style.display = 'block';\n    el.nativeElement.style.margin = '0';\n    el.nativeElement.style.padding = '0';\n  }\n\n  ngOnInit(): void\n  {\n    this.filter();\n  }\n\n  filter()\n  {\n    let w = this.body.nativeElement.clientWidth - this.offsetX;\n    let h = this.body.nativeElement.clientHeight - this.offsetY;\n    this.body.nativeElement.style.left = -w + 'px';\n    this.body.nativeElement.style.top = -h + 'px';\n\n    this.body.nativeElement.style.webkitFilter = `drop-shadow(${w}px ${h}px ${this.colorValue})`;\n  }\n\n}\n"]}