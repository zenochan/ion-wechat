{"version":3,"file":"data.service.js","sourceRoot":"","sources":["../../../src/providers/data.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from \"@angular/core\";\nimport \"rxjs/add/operator/map\";\nimport {Storage} from \"@ionic/storage\";\nimport {Events} from \"ionic-angular\";\n\n\nlet ENV = {DEBUG: false};\n\n/*\n Generated class for the DataService provider.\n\n See https://angular.io/docs/ts/latest/guide/dependency-injection.html\n for more info on providers and Angular 2 DI.\n */\n@Injectable()\nexport class DataService\n{\n\n  private static KEY_USER: string = 'user';\n  private user: any;\n\n  constructor(public storage: Storage, public events: Events)\n  {\n    this.getUser().then(user => {\n      if (this.user) this.events.publish(\"user:ready\", this.user)\n    }).catch();\n  }\n\n  setUser(user: any)\n  {\n    console.warn(\"set user\");\n    this.user = user;\n    if (this.user) {\n      // *m/7d 有效期\n      // this.user.expiresIn = Date.now() + (ENV.DEBUG ? 600000 : 86400000 * 30);\n      this.user.expiresIn = Date.now() + (ENV.DEBUG ? 1000 : 86400000 * 7);\n      this.events.publish(\"user:ready\", this.user)\n    }\n    this.storage.set(DataService.KEY_USER, user);\n  }\n\n  getUser(): Promise<any>\n  {\n    if (this.user) {\n      return Promise.resolve(this.user);\n    } else {\n      return this.storage.get(DataService.KEY_USER)\n          .then(user => {\n            if (user && user.expiresIn < Date.now()) {\n              this.storage.remove(DataService.KEY_USER);\n              return null;\n            }\n            this.user = user;\n            return this.user;\n          });\n    }\n  }\n\n  getUserSync(): any\n  {\n    return this.user;\n  }\n\n  get(key: string): Promise<any>\n  {\n    return this.storage.get(key)\n  }\n\n  set(key: string, value: any): Promise<any>\n  {\n    return this.storage.set(key, value);\n  }\n\n  doOnUserReady(action: (user: any) => void, event: string = \"user:ready\")\n  {\n    if (this.user) {\n      action(this.user);\n      console.warn(\"user ready\");\n    } else {\n      this.events.subscribe(event, action);\n      console.warn(\"user no ready\");\n    }\n  }\n}\n"]}