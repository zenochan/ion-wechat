{"version":3,"file":"sanitizer.js","sourceRoot":"","sources":["../../../src/pipes/sanitizer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAE,IAAI,EAAgB,MAAM,eAAe,CAAC;AAC9D,OAAO,EAAC,YAAY,EAAC,MAAM,2BAA2B,CAAC;;;;;;;;;;;IAiBrD,mBAAmB,SAAuB;QAAvB,cAAS,GAAT,SAAS,CAAc;kCAFhB,EAAC,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,YAAY,EAAE,CAAC,EAAC;KAE3C;IAE/C,6BAAS,GAAT,UAAU,KAAK,EAAE,IAAI;QAEnB,IAAI,GAAG,CAAC;QACR,KAAK,GAAG,KAAK,GAAG,EAAE,CAAC;QAEnB,IAAI,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;QAC5C,EAAE,CAAC,CAAC,IAAI,IAAI,OAAO,IAAI,IAAI,QAAQ,IAAI,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;YAClG,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;SACvD;QAED,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YAChB,KAAK,IAAI,CAAC,kBAAkB,CAAC,IAAI;gBAC/B,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;gBACpD,KAAK,CAAC;YACR,KAAK,IAAI,CAAC,kBAAkB,CAAC,GAAG;gBAC9B,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;gBACnD,KAAK,CAAC;YACR,KAAK,IAAI,CAAC,kBAAkB,CAAC,MAAM;gBACjC,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,yBAAyB,CAAC,KAAK,CAAC,CAAC;gBACtD,KAAK,CAAC;YACR,KAAK,IAAI,CAAC,kBAAkB,CAAC,KAAK;gBAChC,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;gBACrD,KAAK,CAAC;YACR,KAAK,IAAI,CAAC,kBAAkB,CAAC,YAAY;gBACvC,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,8BAA8B,CAAC,KAAK,CAAC,CAAC;gBAC3D,KAAK,CAAC;YACR;gBACE,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;gBAC9C,KAAK,CAAC;SACT;QAED,MAAM,CAAC,GAAG,CAAC;KACZ;;gBAxCF,IAAI,SAAC,EAAC,IAAI,EAAE,WAAW,EAAC;gBACxB,UAAU;;;;gBAZH,YAAY;;oBADpB;;SAca,SAAS","sourcesContent":["import {Injectable, Pipe, PipeTransform} from \"@angular/core\";\nimport {DomSanitizer} from \"@angular/platform-browser\";\n\n/**\n * [src]=\"src | sanitizer : 'HTML'\"\n * - NONE\n * - HTML\n * - STYLE\n * - SCRIPT\n * - URL\n * - RESOURCE_URL\n */\n@Pipe({name: 'sanitizer'})\n@Injectable()\nexport class Sanitizer implements PipeTransform\n{\n  SecurityContextMap: any = {NONE: 0, HTML: 1, STYLE: 2, SCRIPT: 3, URL: 4, RESOURCE_URL: 5};\n\n  constructor(public sanitiser: DomSanitizer) { }\n\n  transform(value, args)\n  {\n    let res;\n    value = value + '';\n\n    let context = this.SecurityContextMap.STYLE;\n    if (args && typeof args == \"string\" && this.SecurityContextMap.hasOwnProperty(args.toUpperCase())) {\n      context = this.SecurityContextMap[args.toUpperCase()];\n    }\n\n    switch (context) {\n      case this.SecurityContextMap.HTML:\n        res = this.sanitiser.bypassSecurityTrustHtml(value);\n        break;\n      case this.SecurityContextMap.URL:\n        res = this.sanitiser.bypassSecurityTrustUrl(value);\n        break;\n      case this.SecurityContextMap.SCRIPT:\n        res = this.sanitiser.bypassSecurityTrustScript(value);\n        break;\n      case this.SecurityContextMap.STYLE:\n        res = this.sanitiser.bypassSecurityTrustStyle(value);\n        break;\n      case this.SecurityContextMap.RESOURCE_URL:\n        res = this.sanitiser.bypassSecurityTrustResourceUrl(value);\n        break;\n      default:\n        res = this.sanitiser.sanitize(context, value);\n        break;\n    }\n\n    return res;\n  }\n\n}\n"]}